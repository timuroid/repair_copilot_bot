import os
import openai
import sqlite3
import logging
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from datetime import datetime
import openai.error

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå API-–∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª–µ .env")

openai.api_key = OPENAI_API_KEY

DB_PATH = "conversations.db"
ARCHIVE_DB_PATH = "history.db"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

app = FastAPI()

def init_db():
    for db in [DB_PATH, ARCHIVE_DB_PATH]:
        with sqlite3.connect(db) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS dialogs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    message TEXT,
                    bot_response TEXT,
                    status TEXT DEFAULT "active",
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

            logging.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {db}")

init_db()

class UserMessage(BaseModel):
    user_id: int
    message: str

SYSTEM_PROMPT_TEMPLATE = """
–¢—ã ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤—ã—è–≤–ª—è—Ç—å –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ–ª–æ–º–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ "5 –ø–æ—á–µ–º—É". 
–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è - "–†—É—Å—Å–∫–∏–π"

üìå **–ö–∞–∫ –≤–µ—Å—Ç–∏ –±–µ—Å–µ–¥—É:**  
1Ô∏è‚É£ **–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞**  
   - –°–ø—Ä–æ—Å–∏—Ç–µ: **"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É: –∫–æ–≥–¥–∞ –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ —Ç–∞–∫?"**  
   - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É–ø–æ–º—è–Ω—É–ª **–ø—Ä–∏—á–∏–Ω—É –ø–æ–ª–æ–º–∫–∏**, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ **"–ü–æ—á–µ–º—É?"**, **–Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—è –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–∏–ø–æ—Ç–µ–∑**.  
   - –ï—Å–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ–æ—á–µ–≤–∏–¥–Ω–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ **2-3 –≥–∏–ø–æ—Ç–µ–∑—ã + —Å—Ä–∞–∑—É –∑–∞–¥–∞–π—Ç–µ "–ü–æ—á–µ–º—É?"**, —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤ –Ω—É–∂–Ω–æ–µ —Ä—É—Å–ª–æ.  

2Ô∏è‚É£ **–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ "5 –ø–æ—á–µ–º—É"**  
   - –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ —É–≥–ª—É–±–ª—è–π—Ç–µ—Å—å –≤ —Ü–µ–ø–æ—á–∫—É "–ø–æ—á–µ–º—É?", –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–µ —Ä–µ—à–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.  
   - **–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã**, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –¥–∞–Ω –≤ –¥–∏–∞–ª–æ–≥–µ.  
   - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç, —É—Ç–æ—á–Ω–∏—Ç–µ: **"–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –º–æ–≥–ª–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —ç—Ç–æ–π –ø—Ä–∏—á–∏–Ω–µ?"**  
   - –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ **2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–π –≤–µ—Ä–æ—è—Ç–Ω—ã–π.**  

3Ô∏è‚É£ **–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π**  
   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **—Å–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —á—ë—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞**.  
   - **–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–º**, –∏–∑–±–µ–≥–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤.  

4Ô∏è‚É£ **–ü—Ä–∏–º–µ—Ä—ã –æ–±—â–µ–Ω–∏—è**  

—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - '–ü—Ä–æ–∫–∞—Ç–Ω—ã–π —Å—Ç–∞–Ω –¥–∞—ë—Ç –∫—Ä–∏–≤—ã–µ –ª–∏—Å—Ç—ã.'  
—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç - '–ö–æ–≥–¥–∞ –≤–ø–µ—Ä–≤—ã–µ –∑–∞–º–µ—Ç–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É? –ü—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö?'  

—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - '–í—á–µ—Ä–∞, –Ω–æ –Ω–µ –Ω–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö.'  
—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç - '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:  
   1Ô∏è‚É£ –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –∏–∑–Ω–æ—Å –≤–∞–ª–∫–æ–≤.  
   2Ô∏è‚É£ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∞—á–µ–π –º–µ—Ç–∞–ª–ª–∞.  
   3Ô∏è‚É£ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –Ω–∞–≥—Ä–µ–≤–∞.  
–ü–æ—á–µ–º—É —ç—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏? –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?'  

—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ã—Å–∏–ª–∞—Å—å, —Å—Ç–∞–Ω —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ.'  
—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç - '–ü–æ—á–µ–º—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–≥–ª–∞ –ø–æ–≤—ã—Å–∏—Ç—å—Å—è? –í–æ–∑–º–æ–∂–Ω–æ, —Å–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ?'  

5Ô∏è‚É£ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞**  
   - –ë–æ—Ç **–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å–∞–º**, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–ø–∏—à–µ—Ç **"–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞"**.  
   - –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –±–æ—Ç –∫—Ä–∞—Ç–∫–æ –ø–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥:  
     **"–ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: [—É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É]. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ [—á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å] –≤ –±—É–¥—É—â–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è."**  
   - **–ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é** –≤ –∫–æ–Ω—Ü–µ, —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.  
"""

PROMPT_TEMPLATE = """
{history}
—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_message}'   
"""

def get_gpt_response(user_id: int, message: str) -> str:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT message, bot_response FROM dialogs WHERE user_id = ? AND status = 'active'",
            (user_id,)
        )
        history = cursor.fetchall()

        formatted_history = "\n".join([f"üë∑ {msg}\nü§ñ {resp}" for msg, resp in history])
        prompt = PROMPT_TEMPLATE.format(history=formatted_history, user_message=message)

        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT_TEMPLATE},
                    {"role": "user", "content": prompt}
                ],
                timeout=30
            )
            bot_reply = response["choices"][0]["message"]["content"]
            cursor.execute(
                "INSERT INTO dialogs (user_id, message, bot_response, status) VALUES (?, ?, ?, 'active')",
                (user_id, message, bot_reply)
            )
            conn.commit()
            return bot_reply
        except openai.error.Timeout as e:
            logging.error(f"‚è≥ –¢–∞–π–º–∞—É—Ç –æ—Ç OpenAI: {e}")
            raise HTTPException(status_code=504, detail="–¢–∞–π–º–∞—É—Ç –æ—Ç OpenAI.")
        except openai.error.RateLimitError as e:
            logging.error(f"üö¶ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI: {e}")
            raise HTTPException(status_code=429, detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI.")
        except openai.error.OpenAIError as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ OpenAI.")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise HTTPException(status_code=500, detail="–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

@app.post("/chat")
def chat_with_bot(user_message: UserMessage):
    return {"response": get_gpt_response(user_message.user_id, user_message.message)}

@app.get("/check_dialog")
def check_dialog(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM dialogs WHERE user_id = ? AND status = 'active'",
            (user_id,)
        )
        active_dialogs = cursor.fetchone()[0]
    return {"status": "active" if active_dialogs > 0 else "not_found"}

@app.post("/end_dialog")
def end_dialog(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE dialogs SET status = 'finished' WHERE user_id = ? AND status = 'active'",
            (user_id,)
        )
        conn.commit()
        cursor.execute(
            "SELECT user_id, message, bot_response, status, created_at FROM dialogs WHERE user_id = ? AND status = 'finished'",
            (user_id,)
        )
        messages = cursor.fetchall()

    if not messages:
        return {"error": "–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"}

    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –ë–î
    with sqlite3.connect(ARCHIVE_DB_PATH) as archive_conn:
        archive_cursor = archive_conn.cursor()
        archive_cursor.executemany(
            "INSERT INTO dialogs (user_id, message, bot_response, status, created_at) VALUES (?, ?, ?, ?, ?)",
            messages
        )
        archive_conn.commit()

    # –û—á–∏—Å—Ç–∫–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "DELETE FROM dialogs WHERE user_id = ? AND status = 'finished'",
            (user_id,)
        )
        conn.commit()

    # –°–≤–æ–¥–∫–∞
    summary_prompt = f"""
    –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
    {messages}

    –°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É:
    - –ö–∞–∫–∞—è –±—ã–ª–∞ –∑–∞–º–µ—á–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞?
    - –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ?
    - –ö–∞–∫–∞—è –±—ã–ª–∞ –≤—ã—è–≤–ª–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞?
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": summary_prompt}],
            timeout=30
        )
        summary = response["choices"][0]["message"]["content"]
    except openai.error.Timeout as e:
        logging.error(f"‚è≥ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        summary = "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è."
    except openai.error.OpenAIError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        summary = f"–û—à–∏–±–∫–∞ OpenAI: {str(e)}"
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
        summary = f"–û—à–∏–±–∫–∞: {str(e)}"

    return {"message": "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω", "summary": summary}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, workers=2)
