import logging
import os
import httpx
import re
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

load_dotenv()

# URL —Å–µ—Ä–≤–µ—Ä–∞ FastAPI
API_URL = os.getenv("API_URL")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING, TYPING_REPLY = range(2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è Markdown –≤ HTML
def convert_markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown-—Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç ChatGPT –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è Telegram."""
    text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)  # **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** ‚Üí <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
    text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", text)  # *–ö—É—Ä—Å–∏–≤* ‚Üí <i>–ö—É—Ä—Å–∏–≤</i>
    text = re.sub(r"\n- ", r"\n‚Ä¢ ", text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ (Markdown ‚Üí HTML-friendly)
    return text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Inline Keyboard —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞"
def get_inline_keyboard():
    keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞", callback_data="end_dialog")]]
    return InlineKeyboardMarkup(keyboard)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."""
    keyboard = [[InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π", callback_data="start_dialog")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return CHOOSING

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
async def start_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
    else:
        user_id = update.effective_user.id

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{API_URL}/chat", json={"user_id": user_id, "message": ""})
            response.raise_for_status()

            if update.callback_query:
                await query.edit_message_text(
                    text="–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.",
                    reply_markup=get_inline_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await update.message.reply_text(
                    "–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.",
                    reply_markup=get_inline_keyboard(),
                    parse_mode="HTML"
                )

            return TYPING_REPLY
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return ConversationHandler.END

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ FastAPI."""
    user_id = update.effective_user.id
    user_message = update.message.text

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_URL}/check_dialog", params={"user_id": user_id})
            response.raise_for_status()
            dialog_status = response.json().get("status", "not_found")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return ConversationHandler.END

    if dialog_status in ["not_found", "finished"]:
        await update.message.reply_text(
            "–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –¥–∏–∞–ª–æ–≥. –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π...",
            parse_mode="HTML"
        )
        return await start_dialog(update, context)

    msg = await update.message.reply_text(
        "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
        parse_mode="HTML"
    )

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{API_URL}/chat", json={"user_id": user_id, "message": user_message})
            response.raise_for_status()
            bot_reply = response.json().get("response", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")
            formatted_reply = convert_markdown_to_html(bot_reply)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML

            await msg.edit_text(
                formatted_reply,
                reply_markup=get_inline_keyboard(),
                parse_mode="HTML"
            )
            return TYPING_REPLY
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            return ConversationHandler.END

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
async def end_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(f"{API_URL}/end_dialog", params={"user_id": user_id})
            summary = response.json().get("summary", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏.")
        except httpx.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            summary = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

    formatted_summary = convert_markdown_to_html(summary)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML

    await query.edit_message_text(
        f"‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\nüìå <b>–°–≤–æ–¥–∫–∞:</b>\n{formatted_summary}\n\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –†–µ—à–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É", callback_data="start_dialog")]]),
        parse_mode="HTML"
    )
    return CHOOSING

# –§—É–Ω–∫—Ü–∏—è main –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    token = os.getenv("TELEGRAM_API_TOKEN", "7584175600:AAGT2d_ypZDzInzYJ_xf8SHhKmT-Pit83UM")

    application = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(start_dialog, pattern="^start_dialog$")],
            TYPING_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(end_dialog, pattern="^end_dialog$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()


