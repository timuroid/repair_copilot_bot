#telegram_bot.py

import logging
import os
import httpx
import re
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

load_dotenv()

API_URL = os.getenv("API_URL")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

CHOOSING, TYPING_REPLY = range(2)

WELCOME_MESSAGE = """
<b>üîπ 1. –ß—ë—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É</b>  
<pre>‚ùå ¬´–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏–Ω–∏—è¬ª
‚úÖ ¬´–õ–∏–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ —Ä–µ–∑–∫–∏, –±—ã–ª —â–µ–ª—á–æ–∫¬ª</pre>

<b>üîπ 2. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ</b>  
<pre>‚ùå ¬´–ü—Ä–æ–≤–µ—Ä–∏–ª–∏¬ª
‚úÖ ¬´–ü—Ä–æ–≤–æ–¥–∫–∞ –≤ –Ω–æ—Ä–º–µ, –æ–∫–∏—Å–ª–æ–≤ –Ω–µ—Ç, —Ä–∞–∑—ä—ë–º—ã —Ü–µ–ª—ã¬ª</pre>

<b>üîπ 3. –î–µ–ª–∏—Ç–µ—Å—å –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏</b>  
–®—É–º, –∑–∞–ø–∞—Ö, —Å–≤–µ—Ç ‚Äî –¥–∞–∂–µ –º–µ–ª–æ—á–∏ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø—Ä–∏—á–∏–Ω—É
<pre>‚ùå  ¬´–ù—É –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–ª –∏ –≤—Å—ë¬ª
‚úÖ ¬´–ü–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø–æ—è–≤–∏–ª—Å—è —Ä–µ–∑–∫–∏–π –∑–∞–ø–∞—Ö –≥–∞—Ä–∏¬ª</pre>


<b>–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</b>
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
"""

START_MESSAGE = """
üü¢ <b>–î–∏–∞–ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç.</b>

–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É 
"""


def convert_markdown_to_html(text: str) -> str:
    text = re.sub(r"\*\*(.*?)\*\*", r"<b>\1</b>", text)
    text = re.sub(r"\*(.*?)\*", r"<i>\1</i>", text)
    text = re.sub(r"^### (.*?)$", r"<b><u>\1</u></b>", text, flags=re.MULTILINE)
    text = re.sub(r"\n- ", r"\n‚Ä¢ ", text)
    return text


def get_inline_keyboard():
    keyboard = [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞", callback_data="end_dialog")]]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîß –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π", callback_data="start_dialog")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        WELCOME_MESSAGE,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    return CHOOSING


async def start_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    timeout = httpx.Timeout(120.0)

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        try:
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                reply_markup=None
            )
        except:
            pass

        async with httpx.AsyncClient(timeout=timeout) as client:
            # üí• –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏
            await client.post(f"{API_URL}/force_end_dialog", params={"user_id": user_id})
            # üÜï –°—Ç–∞—Ä—Ç—É–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            await client.post(f"{API_URL}/start_dialog", params={"user_id": user_id})

        #await query.message.reply_text("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
        await query.message.reply_text(START_MESSAGE, parse_mode="HTML")
        return TYPING_REPLY

    else:
        user_id = update.effective_user.id
        await update.message.reply_text(START_MESSAGE, parse_mode="HTML")

        async with httpx.AsyncClient(timeout=timeout) as client:
            await client.post(f"{API_URL}/force_end_dialog", params={"user_id": user_id})
            await client.post(f"{API_URL}/start_dialog", params={"user_id": user_id})

        return TYPING_REPLY


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text

    timeout = httpx.Timeout(120.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        response = await client.get(f"{API_URL}/check_dialog", params={"user_id": user_id})
        dialog_data = response.json()

    if not dialog_data.get("active"):
        await update.message.reply_text("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –¥–∏–∞–ª–æ–≥. –ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π...", parse_mode="HTML")
        return await start_dialog(update, context)

    # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "last_bot_message_id" in context.user_data:
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_bot_message_id"],
                reply_markup=None
            )
        except:
            pass  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    msg = await update.message.reply_text(
    "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
    parse_mode="HTML"
    )

    async with httpx.AsyncClient(timeout=timeout) as client:
        response = await client.post(f"{API_URL}/chat", json={"user_id": user_id, "message": user_message})
        response.raise_for_status()
        raw_reply = response.json().get("response")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–∂–µ –µ—Å–ª–∏ response = None –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if not isinstance(raw_reply, str) or not raw_reply.strip():
        logging.warning(f"‚ö†Ô∏è GPT –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None –¥–ª—è user_id={user_id}")
        safe_text = "ü§ñ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å."  # –Ω–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª U+200E
    else:
        safe_text = convert_markdown_to_html(raw_reply.strip())

    await msg.edit_text(
        safe_text,
        reply_markup=get_inline_keyboard(),
        parse_mode="HTML"
    )
    # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π
    context.user_data["last_bot_message_id"] = msg.message_id

    return TYPING_REPLY

async def end_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    timeout = httpx.Timeout(120.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        response = await client.post(f"{API_URL}/end_dialog", params={"user_id": user_id})
        summary = response.json().get("summary", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏.")

    formatted_summary = convert_markdown_to_html(summary)

    # üßπ –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if "last_bot_message_id" in context.user_data:
        try:
            await context.bot.edit_message_reply_markup(
                chat_id=query.message.chat_id,
                message_id=context.user_data["last_bot_message_id"],
                reply_markup=None
            )
        except:
            pass  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ
    
    # ‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    # await query.message.reply_text("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")

    # üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–≤–æ–¥–∫–æ–π
    await query.message.reply_text(
        f"üèÅ<b>–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\nüìå <b>–°–≤–æ–¥–∫–∞:</b>\n{formatted_summary}\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</b>\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîß –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π", callback_data="start_dialog")]]
        ),
        parse_mode="HTML"
    )

    return CHOOSING


def main():
    token = os.getenv("TELEGRAM_API_TOKEN")
    application = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(start_dialog, pattern="^start_dialog$")],
            TYPING_REPLY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CallbackQueryHandler(end_dialog, pattern="^end_dialog$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()
